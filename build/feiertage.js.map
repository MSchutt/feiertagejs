{"version":3,"file":"feiertage.js","sources":["../src/regions.js","../src/holiday-type.js","../src/german-translations.js","../src/feiertage.js"],"sourcesContent":["// @flow\n\nexport type Region =\n  | 'BW' // Baden-Württemberg\n  | 'BY' // Bayern\n  | 'BE' // Berlin\n  | 'BB' // Brandenburg\n  | 'HB' // Bremen\n  | 'HE' // Hessen\n  | 'HH' // Hamburg\n  | 'MV' // Mecklenburg-Vorpommern\n  | 'NI' // Niedersachsen\n  | 'NW' // Nordrhein-Westfalen\n  | 'RP' // Rheinland-Pfalz\n  | 'SL' // Saarland\n  | 'SN' // Sachsen\n  | 'ST' // Sachsen-Anhalt\n  | 'SH' // Schleswig-Holstein\n  | 'TH' // Thüringen\n  | 'BUND' // Gesamt-Deutschland\n  | 'ALL';\n\nexport const allRegions: Array<Region> = [\n  'BW',\n  'BY',\n  'BE',\n  'BB',\n  'HB',\n  'HE',\n  'HH',\n  'MV',\n  'NI',\n  'NW',\n  'RP',\n  'SL',\n  'SN',\n  'ST',\n  'SH',\n  'TH',\n  'BUND',\n  'ALL'\n];\n","// @flow\n\nexport type HolidayType =\n  | 'NEUJAHRSTAG'\n  | 'HEILIGEDREIKOENIGE'\n  | 'KARFREITAG'\n  | 'OSTERSONNTAG'\n  | 'OSTERMONTAG'\n  | 'TAG_DER_ARBEIT'\n  | 'CHRISTIHIMMELFAHRT'\n  | 'MARIAHIMMELFAHRT'\n  | 'PFINGSTSONNTAG'\n  | 'PFINGSTMONTAG'\n  | 'FRONLEICHNAM'\n  | 'DEUTSCHEEINHEIT'\n  | 'REFORMATIONSTAG'\n  | 'ALLERHEILIGEN'\n  | 'BUBETAG'\n  | 'ERSTERWEIHNACHTSFEIERTAG'\n  | 'ZWEITERWEIHNACHTSFEIERTAG';\n\nexport const allHolidays: Array<HolidayType> = [\n  'NEUJAHRSTAG',\n  'HEILIGEDREIKOENIGE',\n  'KARFREITAG',\n  'OSTERSONNTAG',\n  'OSTERMONTAG',\n  'TAG_DER_ARBEIT',\n  'CHRISTIHIMMELFAHRT',\n  'MARIAHIMMELFAHRT',\n  'PFINGSTSONNTAG',\n  'PFINGSTMONTAG',\n  'FRONLEICHNAM',\n  'DEUTSCHEEINHEIT',\n  'REFORMATIONSTAG',\n  'ALLERHEILIGEN',\n  'BUBETAG',\n  'ERSTERWEIHNACHTSFEIERTAG',\n  'ZWEITERWEIHNACHTSFEIERTAG'\n];\n","// @flow\n\nimport type { TranslationTable } from './feiertage';\n\n/**\n * @private\n */\nexport const germanTranslations: TranslationTable = {\n  NEUJAHRSTAG: 'Neujahrstag',\n  HEILIGEDREIKOENIGE: 'Heilige Drei Könige',\n  KARFREITAG: 'Karfreitag',\n  OSTERSONNTAG: 'Ostersonntag',\n  OSTERMONTAG: 'Ostermontag',\n  TAG_DER_ARBEIT: 'Tag der Arbeit',\n  CHRISTIHIMMELFAHRT: 'Christi Himmelfahrt',\n  PFINGSTSONNTAG: 'Pfingstsonntag',\n  PFINGSTMONTAG: 'Pfingstmontag',\n  FRONLEICHNAM: 'Fronleichnam',\n  MARIAHIMMELFAHRT: 'Mariä Himmelfahrt',\n  DEUTSCHEEINHEIT: 'Tag der Deutschen Einheit',\n  REFORMATIONSTAG: 'Reformationstag',\n  ALLERHEILIGEN: 'Allerheiligen',\n  BUBETAG: 'Buß- und Bettag',\n  ERSTERWEIHNACHTSFEIERTAG: '1. Weihnachtstag',\n  ZWEITERWEIHNACHTSFEIERTAG: '2. Weihnachtstag'\n};\n","// @flow\n\n/*!\n * feiertage.js\n * @repository https://github.com/sfakir/feiertagejs\n * @docs https://github.com/sfakir/feiertagejs/blob/master/docs.md\n *\n * Copyright 2015-2017 Simon Fakir\n * Released under the MIT license\n */\n\n//\n// Additional readings\n// - how to format a javascript date: http://blog.stevenlevithan.com/archives/date-time-format\n// - the right javascript date: http://stackoverflow.com/questions/10286204/the-right-json-date-format\n//\n\nimport type { Region } from './regions';\nimport { allRegions } from './regions';\nimport type { HolidayType } from './holiday-type';\nimport { allHolidays } from './holiday-type';\nimport type { Holiday } from './holiday';\nimport { germanTranslations } from './german-translations';\n\nconst env = 'prod'; // (process && process.env && process.env.NODE_ENV && process.env.NODE_ENV == 'test' ? 'test' : 'prod');\n\n// translations\n\nconst defaultLanguage = 'de';\nlet currentLanguage = defaultLanguage;\n\n/**\n * Map of {@link HolidayType} to translation string.\n */\nexport type TranslationTable = {\n  [key: HolidayType]: string\n};\n\nconst translations: { [key: string]: TranslationTable } = {\n  de: germanTranslations\n};\n\n/**\n * adds a translation for the holidays (e.g. english).\n * This also allows to override the German names.\n * Hint: Interpolates German for missing translations\n * @param {string} isoCode of the new language\n * @param {TranslationTable} newTranslation  map of {HolidayType} to translation stringg\n */\nexport function addTranslation(\n  isoCode: string,\n  newTranslation: TranslationTable\n) {\n  isoCode = isoCode.toLowerCase();\n  const defaultTranslation = translations[defaultLanguage];\n  let missingFields = false;\n\n  // fill new Translation with default Language\n  for (let prop in defaultTranslation) {\n    if (!defaultTranslation.hasOwnProperty(prop)) continue;\n    if (!newTranslation[prop]) {\n      missingFields = true;\n      newTranslation[prop] = defaultTranslation[prop];\n    }\n  }\n  if (missingFields) {\n    console.warn(\n      '[feiertagejs] addTranslation: you did not add all holidays in your translation! Took German as fallback'\n    );\n  }\n\n  translations[isoCode] = newTranslation;\n}\n\n/**\n * Set a language to default language\n * @param {string} isoCode\n */\nexport function setLanguage(isoCode: string) {\n  isoCode = isoCode.toLowerCase();\n  if (!translations[isoCode]) {\n    if (env !== 'test') {\n      console.error(\n        `[feiertagejs] tried to set language to ${isoCode} but the translation is missing. Please use addTranslation(isoCode,object) first`\n      );\n    }\n    return;\n  }\n  currentLanguage = isoCode;\n}\n\n/**\n * Get currently set language\n * @returns {string}\n */\nexport function getLanguage(): string {\n  return currentLanguage;\n}\n\n// holidays api\n\n/**\n * Checks if a specific date is sunday or holiday.\n * @param date\n * @param region\n * @returns {boolean}\n */\nexport function isSunOrHoliday(date: Date, region: Region): boolean {\n  checkRegion(region);\n  return date.getDay() === 0 || isHoliday(date, region);\n}\n\n/**\n * Check is specific date is holiday.\n * @param date\n * @param {Region} region two character {@link Region} code\n * @returns {boolean}\n */\nexport function isHoliday(date: Date, region: Region): boolean {\n  checkRegion(region);\n  date = new Date(date);\n\n  const year = date.getFullYear();\n  const internalDate = toUtcTimestamp(date);\n  const holidays = _getHolidaysIntegerRepresentation(year, region);\n\n  return holidays.indexOf(internalDate) !== -1;\n}\n\nexport function getHolidayByDate(\n  date: Date,\n  region: Region = 'ALL'\n): Holiday | undefined {\n  checkRegion(region);\n  const holidays = _getHolidaysObjectRepresentation(date.getFullYear(), region);\n  return holidays.find(holiday => holiday.equals(date));\n}\n\n// additional runtime checks\n\n/**\n * Checks if the given region is a valid {@link Region}.\n *\n * @param region {@link Region} to check\n * @throws {Error}\n * @private\n */\nfunction checkRegion(region: ?Region) {\n  if (allRegions.indexOf(region) === -1) {\n    throw new Error(\n      `Invalid region: ${region}! Must be one of ${allRegions.toString()}`\n    );\n  }\n}\n\n/**\n * Checks if the given holidayName is a valid {@link HolidayType}.\n * @param holidayName {@link HolidayType} to check\n * @throws {Error}\n * @private\n */\nfunction checkHolidayType(holidayName: ?HolidayType) {\n  if (\n    holidayName === null ||\n    holidayName === undefined ||\n    allHolidays.indexOf(holidayName) === -1\n  ) {\n    throw new Error(\n      `feiertage.js: invalid holiday type \"${holidayName}\"! Must be one of ${allHolidays.toString()}`\n    );\n  }\n}\n\nexport function isSpecificHoliday(\n  date: Date,\n  holidayName: HolidayType,\n  region: Region = 'ALL'\n): boolean {\n  checkRegion(region);\n  checkHolidayType(holidayName);\n  const holidays = _getHolidaysObjectRepresentation(date.getFullYear(), region);\n  return holidays.find(holiday => holiday.equals(date)) !== undefined;\n}\n\n/**\n * Returns all holidays of a year in a {@link Region}.\n * @param year\n * @param region\n * @returns {Array.<Holiday>}\n */\nexport function getHolidays(year: number, region: Region) {\n  checkRegion(region);\n  return _getHolidaysObjectRepresentation(year, region);\n}\n\n/**\n *\n * @param year\n * @param region\n * @returns {*}\n * @private\n */\nfunction _getHolidaysIntegerRepresentation(year: number, region: Region) {\n  const holidays = _getHolidaysOfYear(year, region);\n  return holidays.integers;\n}\n\n/**\n *\n * @param year\n * @param region\n * @returns {Array.<Holiday>}\n * @private\n */\nfunction _getHolidaysObjectRepresentation(year: number, region: Region) {\n  const holidays = _getHolidaysOfYear(year, region);\n  return holidays.objects;\n}\n\n/**\n *\n * @param year\n * @param region\n * @returns {{objects: Array.<Holiday>, integers}}\n * @private\n */\nfunction _getHolidaysOfYear(year: number, region: Region) {\n  const feiertageObjects: Array<Holiday> = [\n    _newHoliday('NEUJAHRSTAG', _makeDate(year, 1, 1)),\n    _newHoliday('TAG_DER_ARBEIT', _makeDate(year, 5, 1)),\n    _newHoliday('DEUTSCHEEINHEIT', _makeDate(year, 10, 3)),\n    _newHoliday('ERSTERWEIHNACHTSFEIERTAG', _makeDate(year, 12, 25)),\n    _newHoliday('ZWEITERWEIHNACHTSFEIERTAG', _makeDate(year, 12, 26))\n  ];\n\n  const easter_date = getEasterDate(year);\n  let karfreitag = new Date(easter_date.getTime());\n  karfreitag = addDays(karfreitag, -2);\n  let ostermontag = new Date(easter_date.getTime());\n  ostermontag = addDays(ostermontag, 1);\n  let christi_himmelfahrt = new Date(easter_date.getTime());\n  christi_himmelfahrt = addDays(christi_himmelfahrt, 39);\n  let pfingstsonntag = new Date(easter_date.getTime());\n  pfingstsonntag = addDays(pfingstsonntag, 49);\n\n  let pfingstmontag = new Date(easter_date.getTime());\n  pfingstmontag = addDays(pfingstmontag, 50);\n\n  feiertageObjects.push(_newHoliday('KARFREITAG', karfreitag));\n  feiertageObjects.push(_newHoliday('OSTERMONTAG', ostermontag));\n  feiertageObjects.push(_newHoliday('CHRISTIHIMMELFAHRT', christi_himmelfahrt));\n  feiertageObjects.push(_newHoliday('PFINGSTMONTAG', pfingstmontag));\n\n  // Heilige 3 Koenige\n  if (\n    region === 'BW' ||\n    region === 'BY' ||\n    region === 'ST' ||\n    region === 'ALL'\n  ) {\n    feiertageObjects.push(\n      _newHoliday('HEILIGEDREIKOENIGE', _makeDate(year, 1, 6))\n    );\n  }\n  if (region === 'BB' || region === 'ALL') {\n    feiertageObjects.push(_newHoliday('OSTERSONNTAG', easter_date));\n    feiertageObjects.push(_newHoliday('PFINGSTSONNTAG', pfingstsonntag));\n  }\n  // Fronleichnam\n  if (\n    region === 'BW' ||\n    region === 'BY' ||\n    region === 'HE' ||\n    region === 'NW' ||\n    region === 'RP' ||\n    region === 'SL' ||\n    region === 'ALL'\n  ) {\n    let fronleichnam = new Date(easter_date.getTime());\n    fronleichnam = addDays(fronleichnam, 60);\n    feiertageObjects.push(_newHoliday('FRONLEICHNAM', fronleichnam));\n  }\n\n  // Maria Himmelfahrt\n  if (region === 'SL' || region === 'ALL') {\n    feiertageObjects.push(\n      _newHoliday('MARIAHIMMELFAHRT', _makeDate(year, 8, 15))\n    );\n  }\n  // Reformationstag\n\n  if (\n    year === 2017 ||\n    region === 'BB' ||\n    region === 'MV' ||\n    region === 'SN' ||\n    region === 'ST' ||\n    region === 'TH' ||\n    region === 'ALL'\n  ) {\n    feiertageObjects.push(\n      _newHoliday('REFORMATIONSTAG', _makeDate(year, 10, 31))\n    );\n  }\n\n  // Allerheiligen\n  if (\n    region === 'BW' ||\n    region === 'BY' ||\n    region === 'NW' ||\n    region === 'RP' ||\n    region === 'SL' ||\n    region === 'ALL'\n  ) {\n    feiertageObjects.push(_newHoliday('ALLERHEILIGEN', _makeDate(year, 11, 1)));\n  }\n\n  // Buss und Bettag\n  if (region === 'SN' || region === 'ALL') {\n    // @todo write test\n    const bussbettag = getBussBettag(year);\n    feiertageObjects.push(\n      _newHoliday(\n        'BUBETAG',\n        _makeDate(\n          bussbettag.getUTCFullYear(),\n          bussbettag.getUTCMonth() + 1,\n          bussbettag.getUTCDate()\n        )\n      )\n    );\n  }\n\n  feiertageObjects.sort(\n    (a: Holiday, b: Holiday) => a.date.getTime() - b.date.getTime()\n  );\n\n  return {\n    objects: feiertageObjects,\n    integers: generateIntegerRepresentation(feiertageObjects)\n  };\n}\n\n/**\n *\n * @param objects\n * @returns {Array}\n * @private\n */\nfunction generateIntegerRepresentation(objects: Array<Holiday>) {\n  return objects.map(holiday => toUtcTimestamp(holiday.date));\n}\n\n/**\n * Calculates the Easter date of a given year.\n * @param year {number}\n * @returns {Date} Easter date\n * @private\n */\nfunction getEasterDate(year: number): Date {\n  const C = Math.floor(year / 100);\n  const N = year - 19 * Math.floor(year / 19);\n  const K = Math.floor((C - 17) / 25);\n  let I = C - Math.floor(C / 4) - Math.floor((C - K) / 3) + 19 * N + 15;\n  I -= 30 * Math.floor(I / 30);\n  I -=\n    Math.floor(I / 28) *\n    (1 -\n      Math.floor(I / 28) *\n        Math.floor(29 / (I + 1)) *\n        Math.floor((21 - N) / 11));\n  let J = year + Math.floor(year / 4) + I + 2 - C + Math.floor(C / 4);\n  J -= 7 * Math.floor(J / 7);\n  const L = I - J;\n  const M = 3 + Math.floor((L + 40) / 44);\n  const D = L + 28 - 31 * Math.floor(M / 4);\n  return new Date(year, M - 1, D);\n}\n\n/**\n * Computes the \"Buss- und Bettag\"'s date.\n * @param jahr {number}\n * @returns {Date} the year's \"Buss- und Bettag\" date\n * @private\n */\nfunction getBussBettag(jahr: number): Date {\n  const weihnachten = new Date(jahr, 11, 25, 12, 0, 0);\n  const ersterAdventOffset = 32;\n  let wochenTagOffset = weihnachten.getDay() % 7;\n\n  if (wochenTagOffset === 0) wochenTagOffset = 7;\n\n  let tageVorWeihnachten = wochenTagOffset + ersterAdventOffset;\n\n  let bbtag = new Date(weihnachten.getTime());\n  bbtag = addDays(bbtag, -tageVorWeihnachten);\n\n  return bbtag;\n}\n\n/**\n * Adds {@code days} days to the given {@link Date}.\n * @param date\n * @param days\n * @returns {Date}\n * @private\n */\nfunction addDays(date: Date, days: number): Date {\n  date.setDate(date.getDate() + days);\n  return date;\n}\n\n/**\n * Creates a new {@link Date}.\n * @param year\n * @param naturalMonth month (1-12)\n * @param day\n * @returns {Date}\n * @private\n */\nfunction _makeDate(year: number, naturalMonth: number, day: number): Date {\n  return new Date(year, naturalMonth - 1, day);\n}\n\n/**\n *\n * @param name\n * @param date\n * @returns {Holiday}\n * @private\n */\nfunction _newHoliday(name: HolidayType, date: Date): Holiday {\n  return {\n    name,\n    date,\n    dateString: _localeDateObjectToDateString(date),\n    trans(lang = currentLanguage) {\n      return translations[lang][this.name];\n    },\n    getNormalizedDate() {\n      return toUtcTimestamp(this.date);\n    },\n    equals(date) {\n      const string = _localeDateObjectToDateString(date);\n      return this.dateString === string;\n    }\n  };\n}\n\n/**\n *\n * @param date\n * @returns {string}\n * @private\n */\nfunction _localeDateObjectToDateString(date) {\n  date = new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000);\n  date.setUTCHours(0, 0, 0, 0);\n  return date.toISOString().slice(0, 10);\n}\n\n/**\n * Returns the UTC timestamp of the given date with hours, minutes, seconds, and milliseconds set to zero.\n * @param date\n * @returns {number} UTC timestamp\n */\nfunction toUtcTimestamp(date: Date): number {\n  date.setHours(0, 0, 0, 0);\n  return date.getTime();\n}\n"],"names":["allRegions","allHolidays","germanTranslations","env","defaultLanguage","currentLanguage","translations","addTranslation","isoCode","newTranslation","toLowerCase","defaultTranslation","missingFields","prop","hasOwnProperty","warn","setLanguage","error","getLanguage","isSunOrHoliday","date","region","getDay","isHoliday","Date","year","getFullYear","internalDate","toUtcTimestamp","holidays","_getHolidaysIntegerRepresentation","indexOf","getHolidayByDate","_getHolidaysObjectRepresentation","find","holiday","equals","checkRegion","Error","toString","checkHolidayType","holidayName","undefined","isSpecificHoliday","getHolidays","_getHolidaysOfYear","integers","objects","feiertageObjects","_newHoliday","_makeDate","easter_date","getEasterDate","karfreitag","getTime","addDays","ostermontag","christi_himmelfahrt","pfingstsonntag","pfingstmontag","push","fronleichnam","bussbettag","getBussBettag","getUTCFullYear","getUTCMonth","getUTCDate","sort","a","b","generateIntegerRepresentation","map","C","Math","floor","N","K","I","J","L","M","D","jahr","weihnachten","ersterAdventOffset","wochenTagOffset","tageVorWeihnachten","bbtag","days","setDate","getDate","naturalMonth","day","name","_localeDateObjectToDateString","lang","string","dateString","getTimezoneOffset","setUTCHours","toISOString","slice","setHours"],"mappings":"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"}